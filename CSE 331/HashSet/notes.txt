Hash Set Project Notes

* Hashsets have no duplicates (are sets)

1)  When the number of entries in the hash table exceeds the product of the load factor
    and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt)
    so that the hash table has approximately twice the number of buckets
        - suggested default load factor (.75)

2)  Note that the HashSet class is templated; any other methods you add should also be templated.

3)  Each HashSet has a designated load factor (the mean number of items per
    bucket). If the load factor is exceeded, you must increase the number of buckets
    and rehash the set. You are not required to rehash after removals although you
    are allowed to. The exact number of buckets is your choice.

4)  You must maintain the set invariants; an item may only be in the set once.
    You must also handle requests to remove elements not in the set.

5)  1. NumBuckets: The number of hash buckets used by the set - O(1)
    2. Contains: Checks whether an item is in the set - O(1)
    3. Insert: Adds an item to the set (if it was not already there). Returns
        whether the addition was successful. - O(1)
    4. Remove: Removes an item from the set. Returns whether the removal was
        successful. - O(1)
    5. Clear: Removes all items from the set. - O(n+k)
    6. ForEach: Invokes a function on each element of the set. The ordering is
        undefined, but it must be invoked precisely once on each item. - O(n+k)
    7. MaxBucketSize: The number of items in the most full bucket. - O(k)
    8. PercentEmptyBuckets: The percentage of buckets that contain no items. - O(k)

6)  Sum ascii values of strings, use the most D least
    significant bits for the key D – sometime called “global depth”
        • How many buckets could our hash table have?
            – 2^D

7)  To hash:
        - Take member with unique ID
        - Their hash location is the result of:
            h(c) = (ID) mod (array.size())
        - Can convert character string to integer (to use as ID)

8)  For extendable hashing, make each member of the array/table a bucket
        - Buckets hold M entries
        - Hashing:
            h(c) = (SUM(ascii(k[i]))) mod (2^D)
                (where D is the global depth (number of least significant digits for key (001, 100, etc. = 3, ...)))

9)  • If M (number of entries per bucket) is small then the table will start to get large
    • Keep table small by using pointers, allows larger values of M
    • Will entail 2 disk access, but this is no worse than if the table started to grow.


10) • You may add additional methods to the HashSet class (such as for rehashing the
        entire set) as desired
    • You may assume that any type given will supply operator==


TODO
